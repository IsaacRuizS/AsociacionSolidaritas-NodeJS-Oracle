
--------------------------------------------------------------------------------
-- VISTAS
--------------------------------------------------------------------------------

-- Vista: VW_ASSOCIATE
CREATE OR REPLACE VIEW VW_ASSOCIATE AS
SELECT 
    ASSOCIATE_ID,
    FIRST_NAME,
    LAST_NAME_1,
    LAST_NAME_2,
    NATIONAL_ID,
    EMAIL,
    PHONE,
    GROSS_SALARY
FROM ASSOCIATE;

-- Vista: VW_BENEFICIARY
CREATE OR REPLACE VIEW VW_BENEFICIARY AS
SELECT 
    BENEFICIARY_ID,
    ASSOCIATE_ID,
    FIRST_NAME,
    LAST_NAME_1,
    LAST_NAME_2,
    RELATIONSHIP,
    PERCENTAGE,
    EMAIL,
    PHONE
FROM BENEFICIARY;

-- Vista: VW_CREDIT
CREATE OR REPLACE VIEW VW_CREDIT AS
SELECT 
    CREDIT_ID,
    ASSOCIATE_ID,
    NAME,
    REQUESTED_AMOUNT,
    CURRENT_BALANCE,
    MONTHLY_PAYMENT,
    INTEREST_RATE,
    APPROVAL_DATE
FROM CREDIT;

-- Vista: VW_SAVING
CREATE OR REPLACE VIEW VW_SAVING AS
SELECT 
    SAVING_ID,
    ASSOCIATE_ID,
    NAME,
    CURRENT_BALANCE,
    MONTHLY_AMOUNT,
    INTEREST_RATE,
    DEADLINE
FROM SAVING;

-- Vista: VW_ASSOCIATE_BENEFICIARY
CREATE OR REPLACE VIEW VW_ASSOCIATE_BENEFICIARY AS
SELECT 
    A.ASSOCIATE_ID,
    A.FIRST_NAME || ' ' || A.LAST_NAME_1 || ' ' || A.LAST_NAME_2 AS FULL_NAME,
    B.BENEFICIARY_ID,
    B.FIRST_NAME AS BENEFICIARY_FIRST_NAME,
    B.LAST_NAME_1 AS BENEFICIARY_LAST_NAME_1,
    B.RELATIONSHIP,
    B.PERCENTAGE
FROM ASSOCIATE A
JOIN BENEFICIARY B ON A.ASSOCIATE_ID = B.ASSOCIATE_ID;

-- VISTA: VW_APORTE_CREDITO
CREATE OR REPLACE VIEW VW_APORTE_CREDITO AS
SELECT 
    AC.ID_APORTE,
    AC.ID_CREDITO,
    AC.MONTO,
    AC.FECHA
FROM APORTECREDITO AC;


-- VISTA: VW_ESTADO_CREDITO
CREATE OR REPLACE VIEW VW_ESTADO_CREDITO AS
SELECT 
    E.ID_ESTADO,
    E.DESCRIPCION
FROM ESTADOCREDITO E;

-- VISTA: VW_CONDICION_LABORAL
CREATE OR REPLACE VIEW VW_CONDICION_LABORAL AS
SELECT 
    C.ID_CONDICION,
    C.DESCRIPCION
FROM CONDICIONLABORAL C;

-- VISTA: VW_RETIRO
CREATE OR REPLACE VIEW VW_RETIRO AS
SELECT 
    R.ID_RETIRO,
    R.ID_AHORRO,
    R.MONTO,
    R.FECHA
FROM RETIRO R;

-- VISTA: VW_APORTE_AHORRO
CREATE OR REPLACE VIEW VW_APORTE_AHORRO AS
SELECT 
    A.ID_APORTE,
    A.ID_AHORRO,
    A.MONTO,
    A.FECHA
FROM APORTEAHORRO A;

-- VISTA: VW_TIPO_AHORRO
CREATE OR REPLACE VIEW VW_TIPO_AHORRO AS
SELECT 
    T.ID_TIPO_AHORRO,
    T.NOMBRE,
    T.DESCRIPCION
FROM TIPOAhorro T;

-- VISTA: VW_ROLES
CREATE OR REPLACE VIEW VW_ROLES AS
SELECT 
    R.ID_ROL,
    R.NOMBRE,
    R.DESCRIPCION
FROM ROLES R;


--------------------------------------------------------------------------------
-- PROCEDIMIENTOS ALMACENADOS
--------------------------------------------------------------------------------

-- SP_CREATE_ASSOCIATE
CREATE OR REPLACE PROCEDURE SP_CREATE_ASSOCIATE (
    P_FIRST_NAME   IN VARCHAR2,
    P_LAST_NAME_1  IN VARCHAR2,
    P_LAST_NAME_2  IN VARCHAR2,
    P_NATIONAL_ID  IN VARCHAR2,
    P_EMAIL        IN VARCHAR2,
    P_PHONE        IN VARCHAR2,
    P_GROSS_SALARY IN NUMBER
) AS
BEGIN
    INSERT INTO ASSOCIATE (
        FIRST_NAME, LAST_NAME_1, LAST_NAME_2,
        NATIONAL_ID, EMAIL, PHONE, GROSS_SALARY
    ) VALUES (
        P_FIRST_NAME, P_LAST_NAME_1, P_LAST_NAME_2,
        P_NATIONAL_ID, P_EMAIL, P_PHONE, P_GROSS_SALARY
    );
    COMMIT;
END;


-- SP_UPDATE_ASSOCIATE
CREATE OR REPLACE PROCEDURE SP_UPDATE_ASSOCIATE (
    P_ID            IN NUMBER,
    P_FIRST_NAME    IN VARCHAR2,
    P_LAST_NAME_1   IN VARCHAR2,
    P_LAST_NAME_2   IN VARCHAR2,
    P_NATIONAL_ID   IN VARCHAR2,
    P_EMAIL         IN VARCHAR2,
    P_PHONE         IN VARCHAR2,
    P_GROSS_SALARY  IN NUMBER
) AS
BEGIN
    UPDATE ASSOCIATE
    SET
        FIRST_NAME   = P_FIRST_NAME,
        LAST_NAME_1  = P_LAST_NAME_1,
        LAST_NAME_2  = P_LAST_NAME_2,
        NATIONAL_ID  = P_NATIONAL_ID,
        EMAIL        = P_EMAIL,
        PHONE        = P_PHONE,
        GROSS_SALARY = P_GROSS_SALARY
    WHERE ASSOCIATE_ID = P_ID;
    COMMIT;
END;


-- SP_DELETE_ASSOCIATE
CREATE OR REPLACE PROCEDURE SP_DELETE_ASSOCIATE (
    P_ID IN NUMBER
) AS
BEGIN
    DELETE FROM ASSOCIATE WHERE ASSOCIATE_ID = P_ID;
    COMMIT;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_BENEFICIARY
CREATE OR REPLACE PROCEDURE SP_CREATE_BENEFICIARY (
    P_ASSOCIATE_ID      IN NUMBER,
    P_FIRST_NAME        IN VARCHAR2,
    P_LAST_NAME_1       IN VARCHAR2,
    P_LAST_NAME_2       IN VARCHAR2,
    P_RELATIONSHIP      IN VARCHAR2,
    P_PERCENTAGE        IN NUMBER,
    P_EMAIL             IN VARCHAR2,
    P_PHONE             IN VARCHAR2
) AS
BEGIN
    INSERT INTO BENEFICIARY (
        ASSOCIATE_ID, FIRST_NAME, LAST_NAME_1, LAST_NAME_2,
        RELATIONSHIP, PERCENTAGE, EMAIL, PHONE
    ) VALUES (
        P_ASSOCIATE_ID, P_FIRST_NAME, P_LAST_NAME_1, P_LAST_NAME_2,
        P_RELATIONSHIP, P_PERCENTAGE, P_EMAIL, P_PHONE
    );
    COMMIT;
END;


-- SP_UPDATE_BENEFICIARY
CREATE OR REPLACE PROCEDURE SP_UPDATE_BENEFICIARY (
    P_BENEFICIARY_ID IN NUMBER,
    P_ASSOCIATE_ID   IN NUMBER,
    P_FIRST_NAME     IN VARCHAR2,
    P_LAST_NAME_1    IN VARCHAR2,
    P_LAST_NAME_2    IN VARCHAR2,
    P_RELATIONSHIP   IN VARCHAR2,
    P_PERCENTAGE     IN NUMBER,
    P_EMAIL          IN VARCHAR2,
    P_PHONE          IN VARCHAR2
) AS
BEGIN
    UPDATE BENEFICIARY
    SET
        ASSOCIATE_ID  = P_ASSOCIATE_ID,
        FIRST_NAME    = P_FIRST_NAME,
        LAST_NAME_1   = P_LAST_NAME_1,
        LAST_NAME_2   = P_LAST_NAME_2,
        RELATIONSHIP  = P_RELATIONSHIP,
        PERCENTAGE    = P_PERCENTAGE,
        EMAIL         = P_EMAIL,
        PHONE         = P_PHONE
    WHERE BENEFICIARY_ID = P_BENEFICIARY_ID;
    COMMIT;
END;


-- SP_DELETE_BENEFICIARY
CREATE OR REPLACE PROCEDURE SP_DELETE_BENEFICIARY (
    P_ID IN NUMBER
) AS
BEGIN
    DELETE FROM BENEFICIARY WHERE BENEFICIARY_ID = P_ID;
    COMMIT;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_CREDIT
CREATE OR REPLACE PROCEDURE SP_CREATE_CREDIT (
    P_ASSOCIATE_ID     IN NUMBER,
    P_NAME             IN VARCHAR2,
    P_REQUESTED_AMOUNT IN NUMBER,
    P_CURRENT_BALANCE  IN NUMBER,
    P_MONTHLY_PAYMENT  IN NUMBER,
    P_INTEREST_RATE    IN NUMBER,
    P_APPROVAL_DATE    IN DATE
) AS
BEGIN
    INSERT INTO CREDIT (
        ASSOCIATE_ID, NAME, REQUESTED_AMOUNT,
        CURRENT_BALANCE, MONTHLY_PAYMENT,
        INTEREST_RATE, APPROVAL_DATE
    ) VALUES (
        P_ASSOCIATE_ID, P_NAME, P_REQUESTED_AMOUNT,
        P_CURRENT_BALANCE, P_MONTHLY_PAYMENT,
        P_INTEREST_RATE, P_APPROVAL_DATE
    );
    COMMIT;
END;


-- SP_UPDATE_CREDIT
CREATE OR REPLACE PROCEDURE SP_UPDATE_CREDIT (
    P_CREDIT_ID        IN NUMBER,
    P_ASSOCIATE_ID     IN NUMBER,
    P_NAME             IN VARCHAR2,
    P_REQUESTED_AMOUNT IN NUMBER,
    P_CURRENT_BALANCE  IN NUMBER,
    P_MONTHLY_PAYMENT  IN NUMBER,
    P_INTEREST_RATE    IN NUMBER,
    P_APPROVAL_DATE    IN DATE
) AS
BEGIN
    UPDATE CREDIT
    SET
        ASSOCIATE_ID     = P_ASSOCIATE_ID,
        NAME             = P_NAME,
        REQUESTED_AMOUNT = P_REQUESTED_AMOUNT,
        CURRENT_BALANCE  = P_CURRENT_BALANCE,
        MONTHLY_PAYMENT  = P_MONTHLY_PAYMENT,
        INTEREST_RATE    = P_INTEREST_RATE,
        APPROVAL_DATE    = P_APPROVAL_DATE
    WHERE CREDIT_ID = P_CREDIT_ID;
    COMMIT;
END;


-- SP_DELETE_CREDIT
CREATE OR REPLACE PROCEDURE SP_DELETE_CREDIT (
    P_ID IN NUMBER
) AS
BEGIN
    DELETE FROM CREDIT WHERE CREDIT_ID = P_ID;
    COMMIT;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_SAVING
CREATE OR REPLACE PROCEDURE SP_CREATE_SAVING (
    P_ASSOCIATE_ID    IN NUMBER,
    P_NAME            IN VARCHAR2,
    P_CURRENT_BALANCE IN NUMBER,
    P_MONTHLY_AMOUNT  IN NUMBER,
    P_INTEREST_RATE   IN NUMBER,
    P_DEADLINE        IN DATE
) AS
BEGIN
    INSERT INTO SAVING (
        ASSOCIATE_ID, NAME, CURRENT_BALANCE,
        MONTHLY_AMOUNT, INTEREST_RATE, DEADLINE
    ) VALUES (
        P_ASSOCIATE_ID, P_NAME, P_CURRENT_BALANCE,
        P_MONTHLY_AMOUNT, P_INTEREST_RATE, P_DEADLINE
    );
    COMMIT;
END;

-- SP_UPDATE_SAVING
CREATE OR REPLACE PROCEDURE SP_UPDATE_SAVING (
    P_SAVING_ID        IN NUMBER,
    P_ASSOCIATE_ID     IN NUMBER,
    P_NAME             IN VARCHAR2,
    P_CURRENT_BALANCE  IN NUMBER,
    P_MONTHLY_AMOUNT   IN NUMBER,
    P_INTEREST_RATE    IN NUMBER,
    P_DEADLINE         IN DATE
) AS
BEGIN
    UPDATE SAVING
    SET
        ASSOCIATE_ID     = P_ASSOCIATE_ID,
        NAME             = P_NAME,
        CURRENT_BALANCE  = P_CURRENT_BALANCE,
        MONTHLY_AMOUNT   = P_MONTHLY_AMOUNT,
        INTEREST_RATE    = P_INTEREST_RATE,
        DEADLINE         = P_DEADLINE
    WHERE SAVING_ID = P_SAVING_ID;
    COMMIT;
END;


-- SP_DELETE_SAVING
CREATE OR REPLACE PROCEDURE SP_DELETE_SAVING (
    P_ID IN NUMBER
) AS
BEGIN
    DELETE FROM SAVING WHERE SAVING_ID = P_ID;
    COMMIT;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_CREDIT_STATUS
CREATE OR REPLACE PROCEDURE SP_CREATE_CREDIT_STATUS (
    P_DESCRIPTION     IN CREDIT_STATUS.DESCRIPTION%TYPE
) AS
BEGIN
    INSERT INTO CREDIT_STATUS (DESCRIPTION)
    VALUES (P_DESCRIPTION);
END;

-- SP_UPDATE_CREDIT_STATUS
CREATE OR REPLACE PROCEDURE SP_UPDATE_CREDIT_STATUS (
    P_STATUS_ID       IN CREDIT_STATUS.STATUS_ID%TYPE,
    P_DESCRIPTION     IN CREDIT_STATUS.DESCRIPTION%TYPE
) AS
BEGIN
    UPDATE CREDIT_STATUS
    SET DESCRIPTION = P_DESCRIPTION
    WHERE STATUS_ID = P_STATUS_ID;
END;

-- SP_DELETE_CREDIT_STATUS
CREATE OR REPLACE PROCEDURE SP_DELETE_CREDIT_STATUS (
    P_STATUS_ID       IN CREDIT_STATUS.STATUS_ID%TYPE
) AS
BEGIN
    DELETE FROM CREDIT_STATUS
    WHERE STATUS_ID = P_STATUS_ID;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_LABOR_CONDITION
CREATE OR REPLACE PROCEDURE SP_CREATE_LABOR_CONDITION (
    P_DESCRIPTION     IN LABOR_CONDITION.DESCRIPTION%TYPE
) AS
BEGIN
    INSERT INTO LABOR_CONDITION (DESCRIPTION)
    VALUES (P_DESCRIPTION);
END;

-- SP_UPDATE_LABOR_CONDITION
CREATE OR REPLACE PROCEDURE SP_UPDATE_LABOR_CONDITION (
    P_CONDITION_ID    IN LABOR_CONDITION.CONDITION_ID%TYPE,
    P_DESCRIPTION     IN LABOR_CONDITION.DESCRIPTION%TYPE
) AS
BEGIN
    UPDATE LABOR_CONDITION
    SET DESCRIPTION = P_DESCRIPTION
    WHERE CONDITION_ID = P_CONDITION_ID;
END;

-- SP_DELETE_LABOR_CONDITION
CREATE OR REPLACE PROCEDURE SP_DELETE_LABOR_CONDITION (
    P_CONDITION_ID    IN LABOR_CONDITION.CONDITION_ID%TYPE
) AS
BEGIN
    DELETE FROM LABOR_CONDITION
    WHERE CONDITION_ID = P_CONDITION_ID;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_ROLE
CREATE OR REPLACE PROCEDURE SP_CREATE_ROLE (
    P_NAME         IN ROLE.NAME%TYPE,
    P_DESCRIPTION  IN ROLE.DESCRIPTION%TYPE
) AS
BEGIN
    INSERT INTO ROLE (NAME, DESCRIPTION)
    VALUES (P_NAME, P_DESCRIPTION);
END;

-- SP_UPDATE_ROLE
CREATE OR REPLACE PROCEDURE SP_UPDATE_ROLE (
    P_ROLE_ID      IN ROLE.ROLE_ID%TYPE,
    P_NAME         IN ROLE.NAME%TYPE,
    P_DESCRIPTION  IN ROLE.DESCRIPTION%TYPE
) AS
BEGIN
    UPDATE ROLE
    SET NAME = P_NAME,
        DESCRIPTION = P_DESCRIPTION
    WHERE ROLE_ID = P_ROLE_ID;
END;

-- SP_DELETE_ROLE
CREATE OR REPLACE PROCEDURE SP_DELETE_ROLE (
    P_ROLE_ID      IN ROLE.ROLE_ID%TYPE
) AS
BEGIN
    DELETE FROM ROLE
    WHERE ROLE_ID = P_ROLE_ID;
END;

--------------------------------------------------------------------------------

-- SP_CREATE_SAVING_TYPE
CREATE OR REPLACE PROCEDURE SP_CREATE_SAVING_TYPE (
    P_NAME         IN SAVING_TYPE.NAME%TYPE,
    P_DESCRIPTION  IN SAVING_TYPE.DESCRIPTION%TYPE
) AS
BEGIN
    INSERT INTO SAVING_TYPE (NAME, DESCRIPTION)
    VALUES (P_NAME, P_DESCRIPTION);
END;

-- SP_UPDATE_SAVING_TYPE
CREATE OR REPLACE PROCEDURE SP_UPDATE_SAVING_TYPE (
    P_SAVING_TYPE_ID  IN SAVING_TYPE.SAVING_TYPE_ID%TYPE,
    P_NAME            IN SAVING_TYPE.NAME%TYPE,
    P_DESCRIPTION     IN SAVING_TYPE.DESCRIPTION%TYPE
) AS
BEGIN
    UPDATE SAVING_TYPE
    SET NAME = P_NAME,
        DESCRIPTION = P_DESCRIPTION
    WHERE SAVING_TYPE_ID = P_SAVING_TYPE_ID;
END;

-- SP_DELETE_SAVING_TYPE
CREATE OR REPLACE PROCEDURE SP_DELETE_SAVING_TYPE (
    P_SAVING_TYPE_ID  IN SAVING_TYPE.SAVING_TYPE_ID%TYPE
) AS
BEGIN
    DELETE FROM SAVING_TYPE
    WHERE SAVING_TYPE_ID = P_SAVING_TYPE_ID;
END;

--------------------------------------------------------------------------------


-- SP_LOGIN_ASSOCIATE
CREATE OR REPLACE PROCEDURE SP_LOGIN_ASSOCIATE (
    P_EMAIL        IN ASSOCIATE.EMAIL%TYPE,
    P_PASSWORD     IN ASSOCIATE.PASSWORD%TYPE,
    P_RESULT       OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_RESULT FOR
        SELECT ASSOCIATE_ID,
               FIRST_NAME,
               LAST_NAME_1,
               LAST_NAME_2,
               EMAIL,
               PHONE
        FROM ASSOCIATE
        WHERE EMAIL = P_EMAIL
          AND PASSWORD = P_PASSWORD;
END;


--------------------------------------------------------------------------------
-- Pruebas --
--------------------------------------------------------------------------------

EXEC SP_CREATE_ASSOCIATE('Jesus', 'Crack', 'asas', '20', 'Ruso.ramirez@example.com', '4561-1234', '5550');

EXEC SP_UPDATE_ASSOCIATE('2', 'Dante', 'TiesS', 'XD', '50', 'DanteGod.ramirez@example.com', '1234-1234', '20000');

EXEC SP_DELETE_ASSOCIATE(5);

EXEC SP_CREATE_BENEFICIARY('3', 'Lucía', 'González', 'Mora', 'Hija', '50', 'lucia.gonzalez@example.com', '8765-4321');

EXEC SP_UPDATE_BENEFICIARY('8', '3', 'Maria', 'González', 'Castro', 'Hija', '60', 'lucia.gonzalez@example.com', '8765-4321');

EXEC SP_DELETE_BENEFICIARY(6);

EXEC SP_CREATE_CREDIT(3, 'Prueba', 2, 2, 2, 2, SYSDATE);

EXEC SP_UPDATE_CREDIT(4, 3, 'Prueba', 3, 3, 3,3, SYSDATE);

EXEC SP_DELETE_CREDIT(3);

EXEC SP_CREATE_SAVING( 3, 'Ahorro Programado', 500000, 25000, 5, SYSDATE);

EXEC SP_UPDATE_SAVING(1, 3, 'Ahorro Programado', 40000, 15000, 10, SYSDATE);

EXEC SP_DELETE_SAVING(2);


SELECT * FROM VW_ASSOCIATE
WHERE NATIONAL_ID = '50';

SELECT * FROM VW_BENEFICIARY;

SELECT * FROM VW_ASSOCIATE_BENEFICIARY;

SELECT * FROM VW_CREDIT
WHERE NAME = 'Prueba';

SELECT * FROM VW_SAVING
WHERE CURRENT_BALANCE >= 35000;
